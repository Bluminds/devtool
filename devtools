#!/bin/bash
source .config/settings.sh

# Function to display script usage
usage() {
    echo "Usage: $0 <platform> <action> [type]"
    echo "  Options:"
    echo "    <platform>           Specify the platform: macos, linux, or windows."
    echo "    <action>             Specify the action to perform: init, install, uninstall, reinstall, versions or setup."
    echo "    [type]               Specify the type of action for 'install|uninstall|reinstall':"
    echo "                          - 'system': System-wide installation."
    echo "                          - 'network': installation for network-related tools."
    echo "                          - 'essentials': installation for essentials-related tools."
    echo "                          - 'productivity': installation for productivity tools."
    echo "                          - 'development': installation for development tools."
    echo "                          - 'media': installation for media tools."
    echo "                          - 'social': installation for social tools."
    echo "                          - 'games': installation for games."
    echo "                          - 'graphics': installation of graphics/video tools."
    echo
    echo "                         Specify the type of action for 'setup':"
    echo "                          - 'list': List apps available for 'setup' action."
    echo
    echo "  Examples:"
    echo "    $0 macos init"
    echo "    $0 linux install development"
    echo
    exit 1
}

# Check for the number of arguments
if [ $# -lt 2 ] || [ $# -gt 3 ]; then
    echo "Error: Invalid number of arguments."
    usage
fi

# Read the arguments in order
platform=$1
action=$2
type=$3

# Validate platform argument
if [[ $platform != "macos" && $platform != "linux" && $platform != "windows" ]]; then
    echo "Error: Invalid platform. Use one of macos, linux, or windows."
    usage
fi

# Validate action argument
if [[ $action != "init" ]] && \
   [[ $action != "install" ]] && \
   [[ $action != "uninstall" ]] && \
   [[ $action != "reinstall" ]] && \
   [[ $action != "setup" ]] && \
   [[ $action != "versions" ]]; then
    echo "Error: Invalid action. Use one of init, install, uninstall, reinstall, versions or setup."
    usage
fi

# Validate type argument for 'install', 'reinstall', 'uninstall' or 'versions' actions
if [ "$action" == "install" ] || \
    [ "$action" == "uninstall" ] || \
    [ "$action" == "reinstall" ] || \
    [ "$action" == "versions" ]; then
    if [ -z "$type" ]; then
        echo "Error: Missing type argument for '(|un|re)install', versions or 'setup' action."
        usage
    elif [[ $type != "system" && 
            $type != "essentials" &&
            $type != "productivity" &&
            $type != "network" &&
            $type != "development" &&
            $type != "media" &&
            $type != "social" &&
            $type != "graphics" &&
            $type != "games" ]]; then
        echo "Error: Invalid type. Use one of system, essentials, productivity, network, development, media, social, graphics, or games."
        usage
    fi
fi

# Validate type argument for 'setup' actions
if [ "$action" == "setup" ]; then
    if [ -z "$type" ]; then
        echo "Error: Missing type argument for 'setup' action."
        usage
    elif [[ $type != "list" && 
            $type != "java" &&
            $type != "raycst" ]]; then
        echo "Error: Invalid type for action 'setup'."
        usage
    fi
fi

####################################################################################################

# Ask for the sudo password if it's not already inserted.
# Function to check if the sudo session is already present
is_sudo_session_present() {
    sudo -nv true > /dev/null 2>&1
    return $?
}

# Check if the sudo session is present
if is_sudo_session_present; then
    echo "Sudo session is present."
    echo
else
    echo "This script will require sudo access for the ${action} action."
    echo -n "Please enter your sudo "
    sudo -v
    echo
fi

# Keep-alive: update existing `sudo` time stamp until `devtool` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

####################################################################################################
####################################################################################################
# MACOS

#INIT
# If $platform is macos and $action is init, execute the following script: bin/initialize_macos.sh
if [ "$platform" == "macos" ] && [ "$action" == "init" ]; then
    echo "Initializing MacOS..."
    source bin/macos_init.sh
fi

# VERSION
# If $platform is macos and $action is version, execute the following script for #type: ./bin/macos_versions.sh
if [ "$platform" == "macos" ] && [ "$action" == "versions" ]; then
    # Call script bin/macos_versions.sh with parameter $action
    source ./bin/macos_versions.sh "$type"
fi

# INSTALL / REINSTALL / UNINSTALL
# If $platform is macos and $action is install, execute the following script for #type: bin/install_macos_type.sh
if [ "$platform" == "macos" ] && { [ "$action" == "install" ] || [ "$action" == "reinstall" ] || [ "$action" == "uninstall" ]; }; then
    # List the packages to be installed from ./lib/macos/brew/$type file.
    echo "==> The following packages will be ${action}ed:"
    cat ./lib/macos/brew/$type | sed 's/^/  /'
    echo

    # Ask for confirmation before installing the packages
    for package in $(cat ./lib/macos/brew/$type); do
        echo -n "Do you want to $action $package? (y/n): "
        read -r CONTINUE

        # Convert input to lowercase using tr and use case-insensitive comparison
        if [[ $(echo "$CONTINUE" | tr '[:upper:]' '[:lower:]') == "y" ]]; then
            echo "==> ${action}ing $package..."
            brew $action $package
        else
            echo
            echo "==> Skipping $package..."
        fi
        echo
    done
fi

# SETUP
# If $platform is macos and $action is setup and type is "list", list the folders in the ./lib/macos/app_settings folder
if [ "$platform" == "macos" ] && [ "$action" == "setup" ] && [ "$type" == "list" ]; then
    echo "==> The following app settings are available:"
    ls -d ./lib/macos/app_settings/* | xargs -n1 basename | sed 's/^/  /'
    echo
fi

####################################################################################################
# LINUX

# If $platform is linux and $action is init, execute the following script: bin/initialize_linux.sh
if [ "$platform" == "linux" ] && [ "$action" == "init" ]; then
    echo "Initializing Linux..."
    #source bin/initialize_linux.sh
fi

